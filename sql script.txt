-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- CORE TABLES (Existing)
-- =====================================================

-- Tasks table - User's quests/to-dos
CREATE TABLE IF NOT EXISTS tasks (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  title TEXT NOT NULL,
  notes TEXT,
  priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
  done BOOLEAN DEFAULT FALSE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  user_id TEXT NOT NULL
);

-- Habits table - User's daily rituals
CREATE TABLE IF NOT EXISTS habits (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  title TEXT NOT NULL,
  cue TEXT,
  focus_attribute TEXT NOT NULL CHECK (focus_attribute IN ('CO', 'PH', 'EM', 'SO')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  user_id TEXT NOT NULL
);

-- Habit completions table - Tracks daily habit completion
CREATE TABLE IF NOT EXISTS habit_completions (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  habit_id UUID NOT NULL REFERENCES habits(id) ON DELETE CASCADE,
  completed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  user_id TEXT NOT NULL
);

-- Focus sessions table - Pomodoro session history
CREATE TABLE IF NOT EXISTS focus_sessions (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  completed_at TIMESTAMP WITH TIME ZONE,
  duration INTEGER DEFAULT 0 NOT NULL,
  mode TEXT NOT NULL CHECK (mode IN ('work', 'break')),
  linked_task_id UUID REFERENCES tasks(id) ON DELETE SET NULL,
  linked_habit_id UUID REFERENCES habits(id) ON DELETE SET NULL,
  coins_earned INTEGER DEFAULT 0 NOT NULL,
  xp_earned INTEGER DEFAULT 0 NOT NULL,
  verification_passed BOOLEAN DEFAULT TRUE NOT NULL,
  user_id TEXT NOT NULL
);

-- User stats table - Aggregate user progress data
CREATE TABLE IF NOT EXISTS user_stats (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id TEXT UNIQUE NOT NULL,
  total_coins INTEGER DEFAULT 0 NOT NULL,
  current_streak INTEGER DEFAULT 0 NOT NULL,
  longest_streak INTEGER DEFAULT 0 NOT NULL,
  total_focus_time INTEGER DEFAULT 0 NOT NULL,
  total_sessions INTEGER DEFAULT 0 NOT NULL,
  total_sprints INTEGER DEFAULT 0 NOT NULL,
  character_level INTEGER DEFAULT 1 NOT NULL,
  attributes JSONB DEFAULT '{"PH": 0, "CO": 0, "EM": 0, "SO": 0}'::jsonb NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- =====================================================
-- NEW TABLES (Reward System v2)
-- =====================================================

-- Daily tracking table - Tracks counts for diminishing returns
CREATE TABLE IF NOT EXISTS daily_tracking (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id TEXT NOT NULL,
  date DATE NOT NULL,
  habits_completed INTEGER DEFAULT 0 NOT NULL,
  tasks_completed INTEGER DEFAULT 0 NOT NULL,
  sprints_completed INTEGER DEFAULT 0 NOT NULL,
  attributes_worked TEXT[] DEFAULT ARRAY[]::TEXT[],
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  UNIQUE(user_id, date)
);

-- Session verifications table - Tracks verification checks
CREATE TABLE IF NOT EXISTS session_verifications (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  session_id UUID REFERENCES focus_sessions(id) ON DELETE CASCADE,
  user_id TEXT NOT NULL,
  scheduled_at TIMESTAMP WITH TIME ZONE NOT NULL,
  responded_at TIMESTAMP WITH TIME ZONE,
  passed BOOLEAN DEFAULT FALSE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Reward events table - Audit log for all rewards
CREATE TABLE IF NOT EXISTS reward_events (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id TEXT NOT NULL,
  event_type TEXT NOT NULL CHECK (event_type IN ('habit', 'task', 'sprint', 'level_up')),
  coins_earned INTEGER DEFAULT 0 NOT NULL,
  xp_earned INTEGER DEFAULT 0 NOT NULL,
  attribute TEXT CHECK (attribute IN ('PH', 'CO', 'EM', 'SO')),
  base_reward INTEGER NOT NULL,
  multipliers JSONB DEFAULT '{}'::jsonb NOT NULL,
  final_reward INTEGER NOT NULL,
  context JSONB DEFAULT '{}'::jsonb NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- =====================================================
-- ADD MISSING COLUMNS TO EXISTING TABLES
-- =====================================================

DO $$
BEGIN
  -- Tasks: Add priority if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='tasks' AND column_name='priority') THEN
    ALTER TABLE tasks ADD COLUMN priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high'));
  END IF;

  -- Tasks: Add notes if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='tasks' AND column_name='notes') THEN
    ALTER TABLE tasks ADD COLUMN notes TEXT;
  END IF;

  -- Tasks: Add done if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='tasks' AND column_name='done') THEN
    ALTER TABLE tasks ADD COLUMN done BOOLEAN DEFAULT FALSE NOT NULL;
  END IF;

  -- Focus sessions: Add xp_earned if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='focus_sessions' AND column_name='xp_earned') THEN
    ALTER TABLE focus_sessions ADD COLUMN xp_earned INTEGER DEFAULT 0 NOT NULL;
  END IF;

  -- Focus sessions: Add verification_passed if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='focus_sessions' AND column_name='verification_passed') THEN
    ALTER TABLE focus_sessions ADD COLUMN verification_passed BOOLEAN DEFAULT TRUE NOT NULL;
  END IF;

  -- User stats: Add total_sprints if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='user_stats' AND column_name='total_sprints') THEN
    ALTER TABLE user_stats ADD COLUMN total_sprints INTEGER DEFAULT 0 NOT NULL;
  END IF;

  -- User stats: Add character_level if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='user_stats' AND column_name='character_level') THEN
    ALTER TABLE user_stats ADD COLUMN character_level INTEGER DEFAULT 1 NOT NULL;
  END IF;

  -- User stats: Add attributes if missing
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='user_stats' AND column_name='attributes') THEN
    ALTER TABLE user_stats ADD COLUMN attributes JSONB DEFAULT '{"PH": 0, "CO": 0, "EM": 0, "SO": 0}'::jsonb NOT NULL;
  END IF;
END $$;

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Tasks indexes
CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);
CREATE INDEX IF NOT EXISTS idx_tasks_done ON tasks(done);
CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority);
CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON tasks(created_at DESC);

-- Habits indexes
CREATE INDEX IF NOT EXISTS idx_habits_user_id ON habits(user_id);
CREATE INDEX IF NOT EXISTS idx_habits_focus_attribute ON habits(focus_attribute);
CREATE INDEX IF NOT EXISTS idx_habits_created_at ON habits(created_at DESC);

-- Habit completions indexes
CREATE INDEX IF NOT EXISTS idx_habit_completions_user_id ON habit_completions(user_id);
CREATE INDEX IF NOT EXISTS idx_habit_completions_habit_id ON habit_completions(habit_id);
CREATE INDEX IF NOT EXISTS idx_habit_completions_completed_at ON habit_completions(completed_at DESC);

-- Focus sessions indexes
CREATE INDEX IF NOT EXISTS idx_focus_sessions_user_id ON focus_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_focus_sessions_started_at ON focus_sessions(started_at DESC);
CREATE INDEX IF NOT EXISTS idx_focus_sessions_mode ON focus_sessions(mode);
CREATE INDEX IF NOT EXISTS idx_focus_sessions_verification ON focus_sessions(verification_passed);

-- User stats indexes
CREATE INDEX IF NOT EXISTS idx_user_stats_user_id ON user_stats(user_id);
CREATE INDEX IF NOT EXISTS idx_user_stats_character_level ON user_stats(character_level);

-- Daily tracking indexes
CREATE INDEX IF NOT EXISTS idx_daily_tracking_user_date ON daily_tracking(user_id, date);
CREATE INDEX IF NOT EXISTS idx_daily_tracking_date ON daily_tracking(date DESC);

-- Session verifications indexes
CREATE INDEX IF NOT EXISTS idx_session_verifications_session ON session_verifications(session_id);
CREATE INDEX IF NOT EXISTS idx_session_verifications_user ON session_verifications(user_id);

-- Reward events indexes
CREATE INDEX IF NOT EXISTS idx_reward_events_user ON reward_events(user_id);
CREATE INDEX IF NOT EXISTS idx_reward_events_type ON reward_events(event_type);
CREATE INDEX IF NOT EXISTS idx_reward_events_created ON reward_events(created_at DESC);

-- =====================================================
-- UNIQUE CONSTRAINTS
-- =====================================================

-- Create an immutable function to extract date (required for unique indexes)
CREATE OR REPLACE FUNCTION date_only(timestamp with time zone)
RETURNS date AS $$
  SELECT $1::date;
$$ LANGUAGE SQL IMMUTABLE;

-- One habit completion per habit per day per user
DROP INDEX IF EXISTS idx_habit_completions_unique_per_day;
CREATE UNIQUE INDEX IF NOT EXISTS idx_habit_completions_one_per_day
  ON habit_completions (habit_id, user_id, date_only(completed_at));

-- =====================================================
-- ROW LEVEL SECURITY (RLS)
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE habits ENABLE ROW LEVEL SECURITY;
ALTER TABLE habit_completions ENABLE ROW LEVEL SECURITY;
ALTER TABLE focus_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_stats ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_tracking ENABLE ROW LEVEL SECURITY;
ALTER TABLE session_verifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE reward_events ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "tasks_all_operations" ON tasks;
DROP POLICY IF EXISTS "habits_all_operations" ON habits;
DROP POLICY IF EXISTS "habit_completions_all_operations" ON habit_completions;
DROP POLICY IF EXISTS "focus_sessions_all_operations" ON focus_sessions;
DROP POLICY IF EXISTS "user_stats_all_operations" ON user_stats;
DROP POLICY IF EXISTS "daily_tracking_all_operations" ON daily_tracking;
DROP POLICY IF EXISTS "session_verifications_all_operations" ON session_verifications;
DROP POLICY IF EXISTS "reward_events_all_operations" ON reward_events;

-- Create permissive policies (MVP - allows all operations)
-- NOTE: For production, replace 'true' with auth.uid()::text = user_id
CREATE POLICY "tasks_all_operations"
  ON tasks FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "habits_all_operations"
  ON habits FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "habit_completions_all_operations"
  ON habit_completions FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "focus_sessions_all_operations"
  ON focus_sessions FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "user_stats_all_operations"
  ON user_stats FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "daily_tracking_all_operations"
  ON daily_tracking FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "session_verifications_all_operations"
  ON session_verifications FOR ALL USING (true) WITH CHECK (true);

CREATE POLICY "reward_events_all_operations"
  ON reward_events FOR ALL USING (true) WITH CHECK (true);

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop triggers if exist
DROP TRIGGER IF EXISTS update_user_stats_updated_at ON user_stats;
DROP TRIGGER IF EXISTS update_daily_tracking_updated_at ON daily_tracking;

-- Create triggers
CREATE TRIGGER update_user_stats_updated_at
  BEFORE UPDATE ON user_stats
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_daily_tracking_updated_at
  BEFORE UPDATE ON daily_tracking
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Show all tables
SELECT
  t.table_name,
  COUNT(c.column_name) as column_count,
  pg_size_pretty(pg_total_relation_size(quote_ident(t.table_name)::regclass)) as table_size
FROM information_schema.tables t
LEFT JOIN information_schema.columns c
  ON c.table_name = t.table_name AND c.table_schema = t.table_schema
WHERE t.table_schema = 'public'
  AND t.table_name IN (
    'tasks', 'habits', 'habit_completions', 'focus_sessions', 
    'user_stats', 'daily_tracking', 'session_verifications', 'reward_events'
  )
GROUP BY t.table_name
ORDER BY t.table_name;

-- Show key columns
SELECT 
  table_name,
  column_name,
  data_type
FROM information_schema.columns
WHERE table_schema = 'public'
  AND table_name IN ('user_stats', 'tasks', 'focus_sessions', 'daily_tracking')
  AND column_name IN ('character_level', 'priority', 'xp_earned', 'verification_passed', 'habits_completed', 'tasks_completed')
ORDER BY table_name, column_name;

-- Final success message
SELECT 
  '✅ DATABASE UPDATED SUCCESSFULLY!' as status,
  'New tables: daily_tracking, session_verifications, reward_events' as new_tables,
  'New columns: character_level, priority, xp_earned, verification_passed' as new_columns;
